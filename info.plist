<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.c0l0rbalance.overhere</string>
	<key>category</key>
	<string>Tools</string>
	<key>connections</key>
	<dict>
		<key>17AECF43-5738-49D2-8181-F5F5AE312B4E</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>3EAFB6B6-628E-4694-B4F7-47658ED23AD0</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>5FC19D48-072D-4E3C-B8B8-CD03405DC8E4</key>
		<array/>
		<key>D05A0095-1DB7-4B74-9FD2-415C6AB3EE66</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>5FC19D48-072D-4E3C-B8B8-CD03405DC8E4</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Sam F</string>
	<key>description</key>
	<string>Find my iPhone!</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>OverHere</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<true/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>overhere</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>1</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for your devices....</string>
				<key>script</key>
				<string>import sys

from pyicloud import PyiCloudService

from workflow import Workflow3, ICON_WARNING

# TODO Use BFG tool to remove old commit credentials


login_info = None
for line in open("apidata.txt", "r").readlines():
    login_info = line.split()

api = PyiCloudService(login_info[0], login_info[1])


def main(wf):
    if api.requires_2sa:
        wf.add_item('Need to verify with iCloud two-factor authentication',
                    "Please use 'overify' keyword to choose which device you'd like to send the code to",
                    valid=False, icon=ICON_WARNING)
        wf.send_feedback()

    else:
        print "2SA not required!"

if __name__ == "__main__":
    wf = Workflow3()
    sys.exit(wf.run(main))
</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Play a sound quickly using iCloud</string>
				<key>title</key>
				<string>Play a sound on an iCloud device</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>D05A0095-1DB7-4B74-9FD2-415C6AB3EE66</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>import sys
from workflow import Workflow3, ICON_WEB, web
from pyicloud import PyiCloudService


if wf.getvar() is not None:
    print "Houston, we have a workflow variable:", str(wf.getvar())
else:
    print "No variable to get / wf.getvar() is None"
    sys.exit()</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>5FC19D48-072D-4E3C-B8B8-CD03405DC8E4</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<true/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>ovt</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>1</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Searching for your devices....</string>
				<key>script</key>
				<string>import sys

from pyicloud import PyiCloudService

from workflow import Workflow3, ICON_WARNING


def main(wf):
	sys.stderr.write("Running main\n")
	it = wf.add_item(title='deviceName',
		subtitle='Send iCloud verification code to this device',
		valid="Yes",
		arg='deviceName_object')
	wf.send_feedback()

if __name__ == "__main__":
	wf = Workflow3()
	sys.exit(wf.run(main))</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>Play a sound quickly using iCloud</string>
				<key>title</key>
				<string>Play a sound on an iCloud device</string>
				<key>type</key>
				<integer>3</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>17AECF43-5738-49D2-8181-F5F5AE312B4E</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>import sys
from workflow import Workflow3, ICON_WEB, ICON_WARNING
from pyicloud import PyiCloudService

log = None

login_info = None
for line in open("apidata.txt", "r").readlines():
    login_info = line.split()
api = PyiCloudService(login_info[0], login_info[1])

chosen_device = sys.argv[0]


def main(wf):
    # Check argument existance:
    if chosen_device is not None:
        log.debug("Houston, we have an argument")
    else:
        log.debug("No argument / argument is None")
        sys.exit()

    # if argument name is a string, the argument is the lost device:

    if isinstance(chosen_device, (str, object)):
        LostDevice = chosen_device
        log.debug(str(LostDevice))
        api.devices[LostDevice].play_sound()
        sys.exit(1)


    # else if argument name is an object, the variable is the chosen 2SA device :

    elif isinstance(chosen_device, (int, object)):
        TwoFactorDevice = chosen_device
        if not api.send_verification_code(TwoFactorDevice):
            wf.add_item(title="Failed to send verification code",
                        subtitle='Please try again', valid="No", icon=ICON_WARNING)
        wf.send_feedback()
        sys.exit(1)


if __name__ == '__main__':
    wf = Workflow3()
    log = wf.logger
    wf.run(main)</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>3EAFB6B6-628E-4694-B4F7-47658ED23AD0</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
	</array>
	<key>readme</key>
	<string></string>
	<key>uidata</key>
	<dict>
		<key>17AECF43-5738-49D2-8181-F5F5AE312B4E</key>
		<dict>
			<key>xpos</key>
			<integer>280</integer>
			<key>ypos</key>
			<integer>310</integer>
		</dict>
		<key>3EAFB6B6-628E-4694-B4F7-47658ED23AD0</key>
		<dict>
			<key>xpos</key>
			<integer>600</integer>
			<key>ypos</key>
			<integer>310</integer>
		</dict>
		<key>5FC19D48-072D-4E3C-B8B8-CD03405DC8E4</key>
		<dict>
			<key>xpos</key>
			<integer>600</integer>
			<key>ypos</key>
			<integer>140</integer>
		</dict>
		<key>D05A0095-1DB7-4B74-9FD2-415C6AB3EE66</key>
		<dict>
			<key>xpos</key>
			<integer>280</integer>
			<key>ypos</key>
			<integer>140</integer>
		</dict>
	</dict>
	<key>webaddress</key>
	<string></string>
</dict>
</plist>
